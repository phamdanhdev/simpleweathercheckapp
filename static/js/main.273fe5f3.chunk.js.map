{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","Date","toLocaleTimeString","realTime","setRealTime","query","setQuery","data","setData","isPending","setIsPending","error","setError","weatherState","setWeatherState","getWeatherData","fetch","then","res","ok","Error","json","weather","main","catch","err","message","useEffect","setInterval","className","type","placeholder","value","onChange","e","target","onKeyPress","key","searchCity","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","icon","faClock","Math","round","temp","humidity","wind","speed","clouds","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.273fe5f3.chunk.js","sourcesContent":["import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faClock } from \"@fortawesome/free-solid-svg-icons\";\nimport { useEffect, useState } from \"react\";\n\nconst api = {\n  key: \"f9f995e5e556c4b8cca140be6996aa5e\",\n  base: \"https://api.openweathermap.org/data/2.5/\",\n};\n\nfunction App() {\n  const [realTime, setRealTime] = useState(new Date().toLocaleTimeString());\n\n  const [query, setQuery] = useState(null);\n  const [data, setData] = useState(null);\n  const [isPending, setIsPending] = useState(true);\n  const [error, setError] = useState(null);\n  const [weatherState, setWeatherState] = useState(null);\n\n  const searchCity = (e) => {\n    if (e.key === \"Enter\") {\n      getWeatherData(query);\n    }\n  };\n\n  const getWeatherData = (query = \"Ho Chi Minh\") => {\n    if (query !== \"\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}`)\n        .then((res) => {\n          if (!res.ok) {\n            setData(null);\n            throw Error(\"Không tìm thấy địa điểm này!\");\n          }\n          return res.json();\n        })\n        .then((data) => {\n          setError(null);\n          setIsPending(false);\n          setData(data);\n          switch (data.weather[0].main) {\n            case \"Clouds\":\n              setWeatherState(\"Nhiều mây\");\n              break;\n\n            case \"Sunny\":\n              setWeatherState(\"Trời nắng\");\n              break;\n            case \"Rain\":\n              setWeatherState(\"Có mưa\");\n              break;\n            case \"Mist\":\n              setWeatherState(\"Ẩm ướt\");\n              break;\n            default:\n              break;\n          }\n        })\n        .catch((err) => {\n          setIsPending(false);\n          setError(err.message);\n        });\n    }\n  };\n\n  useEffect(() => {\n    setInterval(() => {\n      setRealTime(new Date().toLocaleTimeString());\n    }, 1000);\n    getWeatherData();\n  }, []);\n\n  const dateBuilder = (d) => {\n    let days = [\n      \"Chủ Nhật\",\n      \"Thứ Hai\",\n      \"Thứ Ba\",\n      \"Thứ Tư\",\n      \"Thứ Năm\",\n      \"Thứ Sáu\",\n      \"Thứ Bảy\",\n    ];\n    let months = [\n      \"Tháng Một\",\n      \"Tháng Hai\",\n      \"Tháng Ba\",\n      \"Tháng Tư\",\n      \"Tháng Năm\",\n      \"Tháng Sáu\",\n      \"Tháng Bảy\",\n      \"Tháng Tám\",\n      \"Tháng Chín\",\n      \"Tháng Mười\",\n      \"Tháng Mười Một\",\n      \"Tháng Mười Hai\",\n    ];\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day}, ${date} ${month} ${year}`;\n  };\n\n  return (\n    <div className=\"app\">\n      <main>\n        <div className=\"search-box\">\n          <input\n            type=\"text\"\n            className=\"search-bar\"\n            placeholder=\"Ho Chi Minh, Ha Noi, ...\"\n            value={query}\n            onChange={(e) => {\n              setQuery(e.target.value);\n            }}\n            onKeyPress={(e) => searchCity(e)}\n          />\n        </div>\n        <div className=\"location-box\">\n          {data && (\n            <div className=\"location\">\n              {data.name}, {data.sys.country}\n            </div>\n          )}\n          <div className=\"date\">{dateBuilder(new Date())}</div>\n          <div className=\"live-clock\">\n            <FontAwesomeIcon className=\"clock-icon\" icon={faClock} />\n            {realTime}\n          </div>\n        </div>\n        <div className=\"weather-box\">\n          {error && <div className=\"notification\">{error}</div>}\n          {isPending && (\n            <div className=\"notification\">Đang tải dữ liệu ...</div>\n          )}\n          {data && (\n            <div>\n              <div className=\"temp\">{Math.round(data.main.temp, -1)}°c</div>\n              <div className=\"weather\">{weatherState}</div>\n              <div className=\"weather-info\">Độ ẩm: {data.main.humidity}%</div>\n              <div className=\"weather-info\">\n                Tốc độ gió: {data.wind.speed} m/s\n              </div>\n              <div className=\"weather-info\">Độ mây phủ: {data.clouds.all}%</div>\n            </div>\n          )}\n        </div>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}